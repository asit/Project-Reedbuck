module namespace ReedBuck =  "http://www.innodata-isogen.com/ReedBuck/ReedBuck" ;

(:
  : This function returns book information on passing book id as parameter.
  : This Function can be used to display books on the view book page.
  : Test case >> get-book-info("b1")
:)
declare function get-book-info($bookId as xs:string*)
{
    let $book:=xdmp:directory("/Books/","infinity")/bookdata/book[fn:lower-case(@bookid)=fn:lower-case($bookId)]
    return $book
  
};


(:
  : This function returns page information on passing book id and page id as parameter.
  : This Function can be used to display pages on the view page page.
  : Test case >> get-page-info("p1","b1")
:)
declare function get-page-info($pageId as xs:string*,$bookId as xs:string*)
{
     let $page:=xdmp:directory("/Pages/","infinity")/pagedata/pages/page[./../fn:lower-case(@bookid)=fn:lower-case($bookId) and fn:lower-case(@pageid)=fn:lower-case($pageId)  ]
     return $page
  
};


(:
  : This function returns adds new book information to the book.xml in database  on passing book name and book type and book desc as parameter.
  : Book id for each book is auto generated by counting book elements in the book.xml.
  : Test case >>  create-book("abhinav","public","related project discussion")
:)
declare function create-book($bookName as xs:string*,$bookType as xs:string*,$bookDesc as xs:string*)
{
    let $book:=xdmp:directory("/Books/","infinity")/bookdata
    let $bookCount:=fn:count($book/book)
    let $bookIdGen:= fn:concat("B",$bookCount +1)
    let $newBook:= (
                         element book
                         {
                           attribute bookid{$bookIdGen},
                           element book_name{$bookName},
                           element book_type{$bookType},
                           element book_desc{$bookDesc}
                         }
                   )
                   
    return xdmp:node-insert-child($book,$newBook)
   
};


(:
  : This function returns adds new page information in database  on passing book id and page name and page desc as parameter.
  : page id for each page is auto generated by counting page elements in the page xml.
  : Test case >>  create-new-page("B1","ABHINAV","FIRST PAGE")
:)
declare function create-new-page($bookId as xs:string*,$pageName as xs:string*,$pageDesc as xs:string*)
{  
 
    let $bookIdFromDirectory:= (
                                for $each in xdmp:directory("/Pages/")
                                return fn:substring-before(fn:substring-after(xdmp:quote(fn:base-uri($each)),"_"),".")
                               )
     let $PagesCount:=fn:count(xdmp:directory("/Pages/"))
     let $pageIdForNew:=fn:concat("P",1)
     let $pageFileName:= fn:concat("/Pages/","Page","_",$bookId,".xml")
     let $pageCount:=fn:count(xdmp:directory("/Pages/")/pagedata/pages[./@bookid=$bookId]/page)
     let $pageIdForExisting:=fn:concat("P",$pageCount+1)
     let $newPageForBook:= (
                              element pagedata
                              {
                                element pages
                                {
                                  attribute bookid{$bookId},
                                  element page
                                  {
                                    attribute pageid{$pageIdForNew},
                                    element page_name{$pageName},
                                    element page_desc{$pageDesc}
                                  }
                                }
                              }
                           )
                           
     let $newPageForBookInExistingPage:= (
  
                                             element page
                                             {
                                               attribute pageid{$pageIdForExisting},
                                               element page_name{$pageName},
                                               element page_desc{$pageDesc}
                                             }
                                      )                   
                   
        return    
        (
          if($PagesCount!=0)
          then (
                  if($bookIdFromDirectory=$bookId)
                    then
                        xdmp:node-insert-child(xdmp:directory("/Pages/")/pagedata/pages[./@bookid=$bookId],$newPageForBookInExistingPage)
                    else (xdmp:document-insert($pageFileName,$newPageForBook))    
               )
          else (  ) 
        )
               
  
};
 
 
(:
  : This function returns adds new item information into a perticular page in database  on passing book id and page name and link info and desc info and idea info and other info as parameter.
  : Instead of book id and page id all ther parameters are optional but at least one must be passed.
  : item id for each page is auto generated by counting item elements in the page xml.
  : Test cases >>   add-items-to-pages("B1","P1","HELLO link","","","","")
                    add-items-to-pages("B1","P1","","HELLO desc","","","")
                    add-items-to-pages("B1","P1","","","HELLO idea","","")
                    add-items-to-pages("B1","P1","","","","HELLO otherinfo","meeting")
:) 
declare function add-items-to-pages($bookId as xs:string*,$pageId as xs:string*,$linkInfo as xs:string*,$descInfo as xs:string*,$ideaInfo as xs:string*,$otherInfo as xs:string*,$otherInfoDesc as xs:string*)
{
   
        let $bookIdFromDirectory:= (
                                    for $each in xdmp:directory("/Pages/")
                                    return fn:substring-before(fn:substring-after(xdmp:quote(fn:base-uri($each)),"_"),".")
                                   )
        let $pages:=xdmp:directory("/Pages/")/pagedata/pages/page[./../@bookid=$bookId and @pageid=$pageId]
        let $pageCountForNewItem:=fn:count($pages)
        let $itemIdNew:=fn:concat("I",$pageCountForNewItem)
        let $pageCountForExistingItem:=fn:count($pages/item)
        let $itemIdForExistingItem:=fn:concat("I",$pageCountForExistingItem+1)
        let $newItemForPage:= (
                                 element items
                                 {
                                        element item
                                        {
                                          attribute itemid{$itemIdNew},
                                          if($linkInfo)
                                          then
                                          (
                                            element link_info{$linkInfo}
                                          )
                                          else (),
                                          if($descInfo)
                                          then
                                          (
                                             element desc_info{$descInfo}
                                          )
                                          else (),
                                          if($ideaInfo)
                                          then
                                          (
                                               element idea_info{$ideaInfo}
                                          )
                                          else (),
                                          if($otherInfo)
                                          then
                                          ( 
                                             attribute name{$otherInfoDesc},
                                             element other_info{$otherInfo}
                                          )
                                          else ()
                                        }
                                  }      
                              )
        let $existingItemForPage:= (
                                        if($linkInfo)
                                        then
                                        (
                                          element link_info{$linkInfo}
                                        )
                                        else (),
                                        if($descInfo)
                                        then
                                        (
                                           element desc_info{$descInfo}
                                        )
                                        else (),
                                        if($ideaInfo)
                                        then
                                        (
                                             element idea_info{$ideaInfo}
                                        )
                                        else (),
                                        if($otherInfo)
                                        then
                                        (
                                            attribute name{$otherInfoDesc},
                                            element other_info{$otherInfo}
                                        )
                                        else ()
                                   )
                           
        return 
              (
               
                if($pageCountForExistingItem=0 and $bookIdFromDirectory=$bookId)
                then 
                    (
                       xdmp:node-insert-child($pages,$newItemForPage)
                    )
                else 
                   (
                      xdmp:node-insert-child($pages/item,$existingItemForPage) 
                   )
                
              )
};

(:
  :This function provides the functionality of adding comments on item selected by passing $itemId ,$pageId ,$comments as parameters.
  :Each comment.xml are generated by matching the page id and item id of that page.
  :Comment id for each comment are autogenerated.
  :Test case >>  add-comments("I1","P1","nice info")
:)
declare function add-comments($itemId as xs:string*,$pageId as xs:string*,$comments as xs:string*)
{  
      let $itemIdFromDirectory:= (
                                    for $each in xdmp:directory("/CommentsHistory/")
                                    return fn:substring-before(fn:substring-after(xdmp:quote(fn:base-uri($each)),"_"),".")
                                 )
      let $itemIdFromPage:= xdmp:directory("/Pages/")/pagedata/pages/page/item[@itemid=$itemId and ./../@pageid=$pageId]/@itemid
      let $cidGenForNewCount:= fn:count(xdmp:directory("/CommentsHistory/","infinity"))
      let $cidGenForNew:=  fn:concat("C",1)
      let $commentsFileName:=fn:concat("Comments","_",$itemId)
      let $uri:= fn:concat("/CommentsHistory/",$commentsFileName,".xml")
      let $existingComments:=xdmp:directory("/CommentsHistory/","infinity")/commentdata/comments/comment[./../@itemid=$itemId]
      let $commentsCountsFromExistingComment:=fn:count($existingComments)
      let $cidGenForExistingComment:= fn:concat("C",$commentsCountsFromExistingComment+1)
      
      
      let $commentsNew:= (
                                  element commentdata
                                  {
                                    element comments
                                    {
                                      attribute itemid{$itemId},
                                     
                                      element comment
                                      {
                                         attribute cid{$cidGenForNew},
                                         $comments
                                      }
                                      
                                    }
                                  }
                            )
                            
      let $commentsInExisting:= (
                                   element comment
                                    {
                                     attribute cid{$cidGenForExistingComment},
                                     $comments
                                    }
                                )
                                
      return 
       (
            if($cidGenForNewCount!=0)
            then (
                     if($itemIdFromDirectory=$itemIdFromPage )
                     then
                     (xdmp:node-insert-child($existingComments/..,$commentsInExisting))
                     else (xdmp:document-insert($uri,$commentsNew))
                 )
            else ()
       )
    
};
